/*
 * File: app/view/ResponsesToAMembersQuoteRequestGrid.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Cobuy.view.ResponsesToAMembersQuoteRequestGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.responsestoamembersquoterequestgrid',

    requires: [
        'Ext.grid.RowNumberer',
        'Ext.grid.column.Boolean',
        'Ext.grid.column.Date',
        'Ext.grid.View'
    ],

    height: 250,
    width: 400,
    store: 'ResponsesToAMemberQuote',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            columns: [
                {
                    xtype: 'rownumberer',
                    width: 40,
                    dataIndex: 'string',
                    text: 'S/n'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var quoteStore = Ext.getStore('Quotes');
                        var quote = quoteStore.findRecord('id', value);
                        return quote!== null ? quote.get('quote_number'): value;
                    },
                    width: 250,
                    dataIndex: 'quote_id',
                    text: 'Quote Number'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var userStore = Ext.getStore('AllMembers');
                        var user = userStore.findRecord('id', value);
                        if(user.get('middlename') === null || user.get('middlename') === undefined){
                            var name = user.get('firstname') + " " + user.get('lastname');
                        }else{
                            var name = user.get('firstname') + " " + user.get('middlename') + " " + user.get('lastname');
                        }

                        return user!== null ? name: value;
                    },
                    width: 250,
                    dataIndex: 'member_id',
                    text: 'Quote Responder'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'status',
                    text: 'Status'
                },
                {
                    xtype: 'booleancolumn',
                    dataIndex: 'is_quote_escrowed',
                    text: 'Is Escrowed'
                },
                {
                    xtype: 'booleancolumn',
                    dataIndex: 'is_quote_for_future',
                    text: 'Is for Future'
                },
                {
                    xtype: 'booleancolumn',
                    width: 150,
                    dataIndex: 'is_escrow_terms_accepted',
                    text: 'Escrow term Accepted?'
                },
                {
                    xtype: 'booleancolumn',
                    width: 150,
                    dataIndex: 'is_future_facility_terms_accepted',
                    text: 'Futures terms Accepted?'
                },
                {
                    xtype: 'booleancolumn',
                    width: 150,
                    dataIndex: 'is_platform_quotation_terms_accepted',
                    text: 'Quotation terms Accepted?'
                },
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    dataIndex: 'quotation_file',
                    text: 'Quotation File'
                },
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    dataIndex: 'total_amount_quoted',
                    text: 'Total Amount Quoted'
                },
                {
                    xtype: 'datecolumn',
                    width: 200,
                    dataIndex: 'date_quotation_was_sent',
                    text: 'Date Quotation was sent',
                    format: 'd/m/Y'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var userStore = Ext.getStore('AllMembers');
                        var user = userStore.findRecord('id', value);
                        if(user.get('middlename') === null || user.get('middlename') === undefined){
                            var name = user.get('firstname') + " " + user.get('lastname');
                        }else{
                            var name = user.get('firstname') + " " + user.get('middlename') + " " + user.get('lastname');
                        }

                        return user!== null ? name: value;
                    },
                    width: 200,
                    dataIndex: 'quotation_sent_by',
                    text: 'Quotation sent by'
                }
            ]
        });

        me.callParent(arguments);
    }

});