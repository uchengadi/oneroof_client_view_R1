/*
 * File: app/view/MemberConnectionsGrid.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Cobuy.view.MemberConnectionsGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.memberconnectionsgrid',

    requires: [
        'Ext.grid.RowNumberer',
        'Ext.grid.column.Date',
        'Ext.grid.View',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.toolbar.Fill'
    ],

    id: 'memberconnections',
    autoScroll: true,
    store: 'MemberConnectedToOtherMembers',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            columns: [
                {
                    xtype: 'rownumberer',
                    width: 40,
                    dataIndex: 'string',
                    text: 'S/n'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'status',
                    text: 'Status'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var userStore = Ext.getStore('AllMembers');
                        var user = userStore.findRecord('id', value);
                        if(user.get('middlename') === null || user.get('middlename') === undefined){
                            var name = user.get('firstname') + " " + user.get('lastname');
                        }else{
                            var name = user.get('firstname') + " " + user.get('middlename') + " " + user.get('lastname');
                        }

                        return user!== null ? name: value;
                    },
                    width: 200,
                    dataIndex: 'member_id',
                    text: 'Member Name'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'relationship',
                    text: 'Relationship'
                },
                {
                    xtype: 'datecolumn',
                    width: 250,
                    dataIndex: 'date_connection_was_requested',
                    text: 'Date Connection Was Requested',
                    format: 'd/m/Y'
                },
                {
                    xtype: 'datecolumn',
                    width: 250,
                    dataIndex: 'date_connection_was_accepted',
                    text: 'Date Connection Was Accepted',
                    format: 'd/m/Y'
                },
                {
                    xtype: 'datecolumn',
                    width: 250,
                    dataIndex: 'date_connection_was_rejected',
                    text: 'Date Connection Was Rejected',
                    format: 'd/m/Y'
                },
                {
                    xtype: 'datecolumn',
                    width: 250,
                    dataIndex: 'date_connection_was_suspended',
                    text: 'Date Connection Was Suspended',
                    format: 'd/m/Y'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var userStore = Ext.getStore('Members');
                        var user = userStore.findRecord('id', value);
                        if(user.get('middlename') === null || user.get('middlename') === undefined){
                            var name = user.get('firstname') + " " + user.get('lastname');
                        }else{
                            var name = user.get('firstname') + " " + user.get('middlename') + " " + user.get('lastname');
                        }

                        return user!== null ? name: value;
                    },
                    width: 250,
                    dataIndex: 'connection_accepted_by',
                    text: 'Connect Was Accepted By'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var userStore = Ext.getStore('Members');
                        var user = userStore.findRecord('id', value);
                        if(user.get('middlename') === null || user.get('middlename') === undefined){
                            var name = user.get('firstname') + " " + user.get('lastname');
                        }else{
                            var name = user.get('firstname') + " " + user.get('middlename') + " " + user.get('lastname');
                        }

                        return user!== null ? name: value;
                    },
                    width: 250,
                    dataIndex: 'connection_rejected_by',
                    text: 'Connect Was Rejected By'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var userStore = Ext.getStore('Members');
                        var user = userStore.findRecord('id', value);
                        if(user.get('middlename') === null || user.get('middlename') === undefined){
                            var name = user.get('firstname') + " " + user.get('lastname');
                        }else{
                            var name = user.get('firstname') + " " + user.get('middlename') + " " + user.get('lastname');
                        }

                        return user!== null ? name: value;
                    },
                    width: 250,
                    dataIndex: 'connection_suspended_by',
                    text: 'Connect Was Suspended By'
                },
                {
                    xtype: 'gridcolumn',
                    width: 250,
                    dataIndex: 'reason_for_suspension',
                    text: 'Reason for the Suspension'
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            itemId: 'closeBtn',
                            iconCls: 'delete',
                            text: 'Close'
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            itemId: 'disconnectmemberBtn',
                            text: 'Disconnect'
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    }

});