/*
 * File: app/view/RelationshipsAndAssociationsForm.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Cobuy.view.RelationshipsAndAssociationsForm', {
    extend: 'Ext.form.Panel',
    alias: 'widget.relationshipsandassociationsform',

    requires: [
        'Ext.form.FieldSet',
        'Ext.form.field.Text',
        'Ext.button.Button',
        'Ext.form.Label',
        'Ext.grid.Panel',
        'Ext.grid.RowNumberer',
        'Ext.grid.column.Date',
        'Ext.grid.View',
        'Ext.toolbar.Toolbar',
        'Ext.toolbar.Separator',
        'Ext.toolbar.Fill'
    ],

    height: 250,
    id: 'relationship',
    width: 400,
    layout: 'fit',
    bodyPadding: 10,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'fieldset',
                    title: 'Member to Member Relationships & Associations ',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'fieldset',
                            flex: 1,
                            margin: '0 0 0 10',
                            autoScroll: true,
                            title: 'Member to Member Association',
                            layout: {
                                type: 'vbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'container',
                                    flex: 4
                                },
                                {
                                    xtype: 'container',
                                    flex: 2,
                                    margin: 10,
                                    layout: 'fit',
                                    items: [
                                        {
                                            xtype: 'fieldset',
                                            title: 'Connecting to a member',
                                            items: [
                                                {
                                                    xtype: 'container',
                                                    layout: {
                                                        type: 'hbox',
                                                        align: 'stretch'
                                                    },
                                                    items: [
                                                        {
                                                            xtype: 'textfield',
                                                            flex: 7,
                                                            itemId: 'otherMemberBox',
                                                            fieldLabel: 'I need to connect to this Member',
                                                            labelWidth: 250,
                                                            name: 'other_member',
                                                            emptyText: 'enter membership number'
                                                        },
                                                        {
                                                            xtype: 'button',
                                                            flex: 1,
                                                            itemId: 'connectBtn',
                                                            margin: '0 0 0 10',
                                                            text: 'Connect'
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    xtype: 'container',
                                    flex: 4,
                                    layout: {
                                        type: 'vbox',
                                        align: 'stretch'
                                    },
                                    items: [
                                        {
                                            xtype: 'container',
                                            flex: 1
                                        },
                                        {
                                            xtype: 'container',
                                            flex: 1
                                        },
                                        {
                                            xtype: 'container',
                                            flex: 1,
                                            items: [
                                                {
                                                    xtype: 'fieldset',
                                                    margin: 10,
                                                    title: 'Why do I need to connect to another member?',
                                                    items: [
                                                        {
                                                            xtype: 'label',
                                                            html: '<center><em>So as to get the benefit of a Family Membership or employee - employer relationship or any other kind of relationship</em></center>'
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'fieldset',
                            flex: 1,
                            margin: '0 0 0 10',
                            autoScroll: true,
                            layout: 'fit',
                            title: 'Association Manager',
                            items: [
                                {
                                    xtype: 'gridpanel',
                                    id: 'myconnectionsGrid',
                                    itemId: 'myconnectionsGrid',
                                    autoScroll: true,
                                    title: 'List of those in my connection',
                                    store: 'MembersConnectedToThisMember',
                                    columns: [
                                        {
                                            xtype: 'rownumberer',
                                            width: 40,
                                            dataIndex: 'string',
                                            text: 'S/n'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'status',
                                            text: 'Status'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                var userStore = Ext.getStore('AllMembers');
                                                var user = userStore.findRecord('id', value);
                                                if(user.get('middlename') === null || user.get('middlename') === undefined){
                                                    var name = user.get('firstname') + " " + user.get('lastname');
                                                }else{
                                                    var name = user.get('firstname') + " " + user.get('middlename') + " " + user.get('lastname');
                                                }

                                                return user!== null ? name: value;
                                            },
                                            width: 200,
                                            dataIndex: 'other_member_id',
                                            text: 'Member Name'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'relationship',
                                            text: 'Relationship'
                                        },
                                        {
                                            xtype: 'datecolumn',
                                            width: 250,
                                            dataIndex: 'date_connection_was_requested',
                                            text: 'Date Connection Was Requested',
                                            format: 'd/m/Y'
                                        },
                                        {
                                            xtype: 'datecolumn',
                                            width: 250,
                                            dataIndex: 'date_connection_was_accepted',
                                            text: 'Date Connection Was Accepted',
                                            format: 'd/m/Y'
                                        },
                                        {
                                            xtype: 'datecolumn',
                                            width: 250,
                                            dataIndex: 'date_connection_was_rejected',
                                            text: 'Date Connection Was Rejected',
                                            format: 'd/m/Y'
                                        },
                                        {
                                            xtype: 'datecolumn',
                                            width: 250,
                                            dataIndex: 'date_connection_was_suspended',
                                            text: 'Date Connection Was Suspended',
                                            format: 'd/m/Y'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                var userStore = Ext.getStore('AllMembers');
                                                var user = userStore.findRecord('id', value);
                                                if(user.get('middlename') === null || user.get('middlename') === undefined){
                                                    var name = user.get('firstname') + " " + user.get('lastname');
                                                }else{
                                                    var name = user.get('firstname') + " " + user.get('middlename') + " " + user.get('lastname');
                                                }

                                                return user!== null ? name: value;
                                            },
                                            width: 250,
                                            dataIndex: 'connection_accepted_by',
                                            text: 'Connect Was Accepted By'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                var userStore = Ext.getStore('AllMembers');
                                                var user = userStore.findRecord('id', value);
                                                if(user.get('middlename') === null || user.get('middlename') === undefined){
                                                    var name = user.get('firstname') + " " + user.get('lastname');
                                                }else{
                                                    var name = user.get('firstname') + " " + user.get('middlename') + " " + user.get('lastname');
                                                }

                                                return user!== null ? name: value;
                                            },
                                            width: 250,
                                            dataIndex: 'connection_rejected_by',
                                            text: 'Connect Was Rejected By'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                var userStore = Ext.getStore('AllMembers');
                                                var user = userStore.findRecord('id', value);
                                                if(user.get('middlename') === null || user.get('middlename') === undefined){
                                                    var name = user.get('firstname') + " " + user.get('lastname');
                                                }else{
                                                    var name = user.get('firstname') + " " + user.get('middlename') + " " + user.get('lastname');
                                                }

                                                return user!== null ? name: value;
                                            },
                                            width: 250,
                                            dataIndex: 'connection_suspended_by',
                                            text: 'Connect Was Suspended By'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            width: 250,
                                            dataIndex: 'reason_for_suspension',
                                            text: 'Reason for the Suspension'
                                        }
                                    ],
                                    dockedItems: [
                                        {
                                            xtype: 'toolbar',
                                            dock: 'top',
                                            items: [
                                                {
                                                    xtype: 'button',
                                                    disabled: true,
                                                    itemId: 'acceptrejectmemberBtn',
                                                    text: 'Accept/Reject'
                                                },
                                                {
                                                    xtype: 'tbseparator'
                                                },
                                                {
                                                    xtype: 'button',
                                                    disabled: true,
                                                    itemId: 'disconnectmemberBtn',
                                                    text: 'Disconnect'
                                                },
                                                {
                                                    xtype: 'tbseparator'
                                                },
                                                {
                                                    xtype: 'button',
                                                    disabled: true,
                                                    itemId: 'suspendmemberBtn',
                                                    text: 'Suspend/Unsuspend'
                                                },
                                                {
                                                    xtype: 'tbseparator'
                                                },
                                                {
                                                    xtype: 'tbfill'
                                                },
                                                {
                                                    xtype: 'button',
                                                    itemId: 'connectedtoBtn',
                                                    text: 'View my connection to others'
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    }

});